@using System.Linq
@using DashboarJira.Model

@{
    ViewData["Title"] = "Puertas por Estación";

}

<link rel="stylesheet" href="~/css/views/Doors.css">

<div class="header-view">
    <h1 class="text-2xl font-bold dark:text-white title-view-text">@ViewData["Title"]</h1>
</div>

<div class="stations-grid" style="display: flex; flex-wrap: wrap; gap: 20px;">
    @foreach (var estacion in Model)
    {
        <div class="station">
            <h2 class="text-lg font-semibold">@estacion.idEstacion - @estacion.nombreEstacion</h2>
            <table>
                @{
                    var componentes = estacion.Componentes as List<ComponenteHV>;
                }

                <thead>
                    <tr>
                        @if (componentes != null && componentes.Count > 0)
                        {
                            if (componentes.Any(c => c.IdComponente.Contains("WA")))
                            {
                                <th colspan="2">WA</th>
                            }
                            if (componentes.Any(c => c.IdComponente.Contains("WB")))
                            {
                                <th colspan="2">WB</th>
                            }
                            if (componentes.Any(c => c.IdComponente.Contains("WC")))
                            {
                                <th colspan="2">WC</th>
                            }
                            if (componentes.Any(c => c.IdComponente.Contains("WD")))
                            {
                                <th colspan="2">WD</th>
                            }
                            if (componentes.Any(c => c.IdComponente.Contains("WE")))
                            {
                                <th colspan="2">WE</th>
                            }
                        }
                    </tr>
                    <tr>
                        @if (componentes != null && componentes.Count > 0)
                        {
                            if (componentes.Any(c => c.IdComponente.Contains("WA")))
                            {
                                <th>OR</th>
                                <th>OC</th>
                            }
                            if (componentes.Any(c => c.IdComponente.Contains("WB")))
                            {
                                <th>OR</th>
                                <th>OC</th>
                            }
                            if (componentes.Any(c => c.IdComponente.Contains("WC")))
                            {
                                <th>OR</th>
                                <th>OC</th>
                            }
                            if (componentes.Any(c => c.IdComponente.Contains("WD")))
                            {
                                <th>OR</th>
                                <th>OC</th>
                            }
                            if (componentes.Any(c => c.IdComponente.Contains("WE")))
                            {
                                <th>OR</th>
                                <th>OC</th>
                            }
                        }
                    </tr>
                </thead>
                <tbody>
                    @{
                        // Crear listas para almacenar los números y los estados
                        var waOr = new List<int>();
                        var waOc = new List<int>();
                        var wbOr = new List<int>();
                        var wbOc = new List<int>();
                        var wcOr = new List<int>();
                        var wcOc = new List<int>();
                        var wdOr = new List<int>();
                        var wdOc = new List<int>();
                        var weOr = new List<int>();
                        var weOc = new List<int>();

                        // Clasificar los componentes en sus respectivas listas
                        if (componentes != null)
                        {
                            foreach (var componente in componentes)
                            {
                                var parts = componente.IdComponente.Split('-');
                                var lastNumber = int.Parse(parts.Last()); // Obtener el último número

                                // Clasificar según el tipo
                                if (parts[1] == "WA")
                                {
                                    if (parts[2] == "OR")
                                    {
                                        waOr.Add(lastNumber);
                                    }
                                    else if (parts[2] == "OC")
                                    {
                                        waOc.Add(lastNumber);
                                    }
                                }
                                else if (parts[1] == "WB")
                                {
                                    if (parts[2] == "OR")
                                    {
                                        wbOr.Add(lastNumber);
                                    }
                                    else if (parts[2] == "OC")
                                    {
                                        wbOc.Add(lastNumber);
                                    }
                                }
                                else if (parts[1] == "WC")
                                {
                                    if (parts[2] == "OR")
                                    {
                                        wcOr.Add(lastNumber);
                                    }
                                    else if (parts[2] == "OC")
                                    {
                                        wcOc.Add(lastNumber);
                                    }
                                }
                                if (parts[1] == "WD")
                                {
                                    if (parts[2] == "OR")
                                    {
                                        wdOr.Add(lastNumber);
                                    }
                                    else if (parts[2] == "OC")
                                    {
                                        wdOc.Add(lastNumber);
                                    }
                                }
                                else if (parts[1] == "WE")
                                {
                                    if (parts[2] == "OR")
                                    {
                                        weOr.Add(lastNumber);
                                    }
                                    else if (parts[2] == "OC")
                                    {
                                        weOc.Add(lastNumber);
                                    }
                                }
                            }
                        }

                        // Ordenar las listas
                        waOr = waOr.OrderBy(x => x).ToList();
                        waOc = waOc.OrderBy(x => x).ToList();
                        wbOr = wbOr.OrderBy(x => x).ToList();
                        wbOc = wbOc.OrderBy(x => x).ToList();
                        wcOr = wcOr.OrderBy(x => x).ToList();
                        wcOc = wcOc.OrderBy(x => x).ToList();
                        wdOr = wdOr.OrderBy(x => x).ToList();
                        wdOc = wdOc.OrderBy(x => x).ToList();
                        weOr = weOr.OrderBy(x => x).ToList();
                        weOc = weOc.OrderBy(x => x).ToList();

                        // Obtener el número máximo de filas a mostrar
                        //var maxRows = Math.Max(Math.Max(waOr.Count, waOc.Count), Math.Max(Math.Max(wbOr.Count, wbOc.Count), Math.Max(wcOr.Count, wcOc.Count)));
                        var maxRows = Math.Max(Math.Max(Math.Max(waOr.Count, waOc.Count), Math.Max(wbOr.Count, wbOc.Count)),
                        Math.Max(Math.Max(wcOr.Count, wcOc.Count), Math.Max(wdOr.Count, wdOc.Count)));

                        // Renderizar las filas
                        for (int i = 0; i < maxRows; i++)
                        {
                            <tr>
                                @if (waOr.Any() || waOc.Any())
                                {
                                    <td class="@(componentes.FirstOrDefault(c => c.IdComponente.Contains($"WA-OR-{(i < waOr.Count ? waOr[i] : "0")}"))?.EstadoApertura == false ? "bg-green" : (componentes.FirstOrDefault(c => c.IdComponente.Contains($"WA-OR-{(i < waOr.Count ? waOr[i] : "0")}"))?.EstadoApertura == true ? "bg-lightblue" : "bg-gray"))"
                                        style="@(componentes.FirstOrDefault(c => c.IdComponente.Contains($"WA-OR-{(i < waOr.Count ? waOr[i] : "0")}"))?.EstadoErrorCritico == true ? "border: 2px solid red;" : "border: 1px solid #555;")">
                                        @(i < waOr.Count ? waOr[i].ToString() : "")
                                    </td>
                                    <td class="@(componentes.FirstOrDefault(c => c.IdComponente.Contains($"WA-OC-{(i < waOc.Count ? waOc[i] : "0")}"))?.EstadoApertura == false ? "bg-green" : (componentes.FirstOrDefault(c => c.IdComponente.Contains($"WA-OC-{(i < waOc.Count ? waOc[i] : "0")}"))?.EstadoApertura == true ? "bg-lightblue" : "bg-gray"))"
                                        style="@(componentes.FirstOrDefault(c => c.IdComponente.Contains($"WA-OC-{(i < waOc.Count ? waOc[i] : "0")}"))?.EstadoErrorCritico == true ? "border: 2px solid red;" : "border: 1px solid #555;")">
                                        @(i < waOc.Count ? waOc[i].ToString() : "")
                                    </td>
                                }
                                @if (wbOr.Any() || wbOc.Any())
                                {
                                    <td class="@(componentes.FirstOrDefault(c => c.IdComponente.Contains($"WB-OR-{(i < wbOr.Count ? wbOr[i] : "0")}"))?.EstadoApertura == false ? "bg-green" : (componentes.FirstOrDefault(c => c.IdComponente.Contains($"WB-OR-{(i < wbOr.Count ? wbOr[i] : "0")}"))?.EstadoApertura == true ? "bg-lightblue" : "bg-gray"))"
                                        style="@(componentes.FirstOrDefault(c => c.IdComponente.Contains($"WB-OR-{(i < wbOr.Count ? wbOr[i] : "0")}"))?.EstadoErrorCritico == true ? "border: 2px solid red;" : "border: 1px solid #555;")">
                                        @(i < wbOr.Count ? wbOr[i].ToString() : "")
                                    </td>
                                    <td class="@(componentes.FirstOrDefault(c => c.IdComponente.Contains($"WB-OC-{(i < wbOc.Count ? wbOc[i] : "0")}"))?.EstadoApertura == false ? "bg-green" : (componentes.FirstOrDefault(c => c.IdComponente.Contains($"WB-OC-{(i < wbOc.Count ? wbOc[i] : "0")}"))?.EstadoApertura == true ? "bg-lightblue" : "bg-gray"))"
                                        style="@(componentes.FirstOrDefault(c => c.IdComponente.Contains($"WB-OC-{(i < wbOc.Count ? wbOc[i] : "0")}"))?.EstadoErrorCritico == true ? "border: 2px solid red;" : "border: 1px solid #555;")">
                                        @(i < wbOc.Count ? wbOc[i].ToString() : "")
                                    </td>
                                }
                                @if (wcOr.Any() || wcOc.Any())
                                {
                                    <td class="@(componentes.FirstOrDefault(c => c.IdComponente.Contains($"WC-OR-{(i < wcOr.Count ? wcOr[i] : "0")}"))?.EstadoApertura == false ? "bg-green" : (componentes.FirstOrDefault(c => c.IdComponente.Contains($"WC-OR-{(i < wcOr.Count ? wcOr[i] : "0")}"))?.EstadoApertura == true ? "bg-lightblue" : "bg-gray"))"
                                        style="@(componentes.FirstOrDefault(c => c.IdComponente.Contains($"WC-OR-{(i < wcOr.Count ? wcOr[i] : "0")}"))?.EstadoErrorCritico == true ? "border: 2px solid red;" : "border: 1px solid #555;")">
                                        @(i < wcOr.Count ? wcOr[i].ToString() : "")
                                    </td>
                                    <td class="@(componentes.FirstOrDefault(c => c.IdComponente.Contains($"WC-OC-{(i < wcOc.Count ? wcOc[i] : "0")}"))?.EstadoApertura == false ? "bg-green" : (componentes.FirstOrDefault(c => c.IdComponente.Contains($"WC-OC-{(i < wcOc.Count ? wcOc[i] : "0")}"))?.EstadoApertura == true ? "bg-lightblue" : "bg-gray"))"
                                        style="@(componentes.FirstOrDefault(c => c.IdComponente.Contains($"WC-OC-{(i < wcOc.Count ? wcOc[i] : "0")}"))?.EstadoErrorCritico == true ? "border: 2px solid red;" : "border: 1px solid #555;")">
                                        @(i < wcOc.Count ? wcOc[i].ToString() : "")
                                    </td>
                                }
                                @if (wdOr.Any() || wdOc.Any())
                                {
                                    <td class="@(componentes.FirstOrDefault(c => c.IdComponente.Contains($"WD-OR-{(i < wdOr.Count ? wdOr[i] : "0")}"))?.EstadoApertura == false ? "bg-green" : (componentes.FirstOrDefault(c => c.IdComponente.Contains($"WD-OR-{(i < wdOr.Count ? wdOr[i] : "0")}"))?.EstadoApertura == true ? "bg-lightblue" : "bg-gray"))">
                                        @(i < wdOr.Count ? wdOr[i].ToString() : "")
                                    </td>
                                    <td class="@(componentes.FirstOrDefault(c => c.IdComponente.Contains($"WD-OC-{(i < wdOc.Count ? wdOc[i] : "0")}"))?.EstadoApertura == false ? "bg-green" : (componentes.FirstOrDefault(c => c.IdComponente.Contains($"WD-OC-{(i < wdOc.Count ? wdOc[i] : "0")}"))?.EstadoApertura == true ? "bg-lightblue" : "bg-gray"))">
                                        @(i < wdOc.Count ? wdOc[i].ToString() : "")
                                    </td>
                                }
                                @if (wdOr.Any() || weOc.Any())
                                {
                                    <td class="@(componentes.FirstOrDefault(c => c.IdComponente.Contains($"WE-OR-{(i < weOr.Count ? weOr[i] : "0")}"))?.EstadoApertura == false ? "bg-green" : (componentes.FirstOrDefault(c => c.IdComponente.Contains($"WE-OR-{(i < wdOr.Count ? wdOr[i] : "0")}"))?.EstadoApertura == true ? "bg-lightblue" : "bg-gray"))">
                                        @(i < weOr.Count ? weOr[i].ToString() : "")
                                    </td>
                                    <td class="@(componentes.FirstOrDefault(c => c.IdComponente.Contains($"WE-OC-{(i < weOc.Count ? weOc[i] : "0")}"))?.EstadoApertura == false ? "bg-green" : (componentes.FirstOrDefault(c => c.IdComponente.Contains($"WE-OC-{(i < wdOc.Count ? wdOc[i] : "0")}"))?.EstadoApertura == true ? "bg-lightblue" : "bg-gray"))">
                                        @(i < weOc.Count ? weOc[i].ToString() : "")
                                    </td>
                                }


                            </tr>
                        }
                    }
                    @if (componentes == null || componentes.Count == 0)
                    {
                        <tr>
                            <td colspan="6">No hay componentes disponibles para esta estación.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/js/Views/Doors/doors.js"></script>